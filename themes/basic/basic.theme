<?php

/**
 * Here we override the default HTML output of drupal.
 * refer to http://drupal.org/node/550722
 */

use Drupal\Core\Template\Attribute;

function basic_preprocess_html(&$vars) {
  // Get current user.
  $user = \Drupal::currentUser();

  //Add role name classes (to allow css based show for admin/hidden from user)
  $roles = $user->getRoles();
  foreach ($roles as $role){
    $vars['attributes']['class'][] = drupal_html_class('role-' . $role);
  }

  // If we're on the front page.
  if (!$vars['is_front']) {
    // Add unique classes for each page and website section
    $path = ''; //TODO: drupal_get_path_alias($_GET['q']);
    list($section, ) = explode('/', $path, 2);
    $vars['attributes']['class'][] = 'with-subnav';
    $vars['attributes']['class'][] = drupal_html_class('page-'. $path);
    $vars['attributes']['class'][] = drupal_html_class('section-'. $section);

    if (arg(0) == 'node') {
      if (arg(1) == 'add') {
        if ($section == 'node') {
          // Remove 'section-node'
          // TODO: Check what this does.
          array_pop( $vars['attributes']['class'] );
        }
        // Add 'section-node-add'
        $vars['attributes']['class'][] = 'section-node-add';
      }
      elseif (is_numeric(arg(1)) && (arg(2) == 'edit' || arg(2) == 'delete')) {
        if ($section == 'node') {
          // Remove 'section-node'
          // TODO: Check what this does.
          array_pop( $vars['attributes']['class']);
        }
        // Add 'section-node-edit' or 'section-node-delete'
        $vars['attributes']['class'][] = 'section-node-'. arg(2);
      }
    }
  }

  ////for normal un-themed edit pages
  //if ((arg(0) == 'node') && (arg(2) == 'edit')) {
  //  $vars['template_files'][] =  'page';
  //}
//
  //// Add IE classes.
  //if (theme_get_setting('basic_ie_enabled')) {
  //  $basic_ie_enabled_versions = theme_get_setting('basic_ie_enabled_versions');
  //  if (in_array('ie8', $basic_ie_enabled_versions, TRUE)) {
  //    drupal_add_css(path_to_theme() . '/css/ie8.css', array('group' => CSS_THEME, 'browsers' => ray('IE' =>// 'IE 8', '!IE' => FALSE), 'preprocess' => FALSE));
  //    drupal_add_js(path_to_theme() . '/js/selectivizr-min.js');
  //  }
  //  if (in_array('ie9', $basic_ie_enabled_versions, TRUE)) {
  //    drupal_add_css(path_to_theme() . '/css/ie9.css', array('group' => CSS_THEME, 'browsers' => ray('IE' =>// 'IE 9', '!IE' => FALSE), 'preprocess' => FALSE));
  //  }
  //  if (in_array('ie10', $basic_ie_enabled_versions, TRUE)) {
  //    drupal_add_css(path_to_theme() . '/css/ie10.css', array('group' => CSS_THEME, 'browsers' => ray('IE' =//> 'IE 10', '!IE' => FALSE), 'preprocess' => FALSE));
  //  }
  //}
    //die();
}

function basic_preprocess_page(&$vars, $hook) {
  // Adding classes whether #navigation is here or not
  //if (!empty($vars['main_menu']) or !empty($vars['sub_menu'])) {
  //  $vars['attributes']['classes'][] = 'with-navigation';
  //}
  //if (!empty($vars['secondary_menu'])) {
  //  $vars['attributes']['classes'][] = 'with-subnav';
  //}

  // TODO: see if we can move this to the preprocess_html() page so we can add the class to the <body>.
  // This code is quite bloated too.
  if (!empty($vars['page']['sidebar_first']) && empty($vars['page']['sidebar_second'])) {
    $vars['attributes']['class'][] = 'one-sidebar';
    $vars['attributes']['class'][] = 'sidebar-first';
  }
  if (empty($vars['page']['sidebar_first']) && !empty($vars['page']['sidebar_second'])) {
    $vars['attributes']['class'][] = 'one-sidebar';
    $vars['attributes']['class'][] = 'sidebar-second';
  }
  if (!empty($vars['page']['sidebar_first']) && !empty($vars['page']['sidebar_second'])) {
    $vars['attributes']['class'][] = 'two-sidebars';
  }
  if (empty($vars['page']['sidebar_first']) && empty($vars['page']['sidebar_second'])) {
    $vars['attributes']['class'][] = 'no-sidebars';
  }
  //$vars['attributes']['classes'][] = $classes;

//
//  // Add first/last classes to node listings about to be rendered.
//  if (isset($vars['page']['content']['system_main']['nodes'])) {
//    // All nids about to be loaded (without the #sorted attribute).
//    $nids = element_children($vars['page']['content']['system_main']['nodes']);
//    // Only add first/last classes if there is more than 1 node being rendered.
//    if (count($nids) > 1) {
//      $first_nid = reset($nids);
//      $last_nid = end($nids);
//      $first_node = $vars['page']['content']['system_main']['nodes'][$first_nid]['#node'];
//      $first_node->classes_array = array('first');
//      $last_node = $vars['page']['content']['system_main']['nodes'][$last_nid]['#node'];
//      $last_node->classes_array = array('last');
//    }
//  }
//
//  // Allow page override template suggestions based on node content type.
//  if (isset($vars['node']->type) && isset($vars['node']->nid)) {
//    $vars['theme_hook_suggestions'][] = 'page__' . $vars['node']->type;
//    $vars['theme_hook_suggestions'][] = "page__node__" . $vars['node']->nid;
//  }
}

function basic_preprocess_node(&$vars) {
  //krumo($vars);
  //die();
  //// Add a striping class.
  //$vars['attributes']['class'][] = 'node-' . $vars['zebra'];

  //// Add $unpublished variable.
  //$vars['unpublished'] = (!$vars['status']) ? TRUE : FALSE;

  //// Merge first/last class (from basic_preprocess_page) into classes array of current node object.
  //$node = $vars['node'];
  //if (!empty($node->classes_array)) {
  //  $vars['attributes']['class'][] = array_merge($vars['attributes']['class'], $node->classes_array);
  //}
}


/**
 * Return a themed breadcrumb trail.
 *
 * @param $breadcrumb
 *   An array containing the breadcrumb links.
 * @return
 *   A string containing the breadcrumb output.
 */
//function basic_breadcrumb($variables) {
//  $breadcrumb = $variables['breadcrumb'];
//  // Determine if we are to display the breadcrumb.
//  $show_breadcrumb = theme_get_setting('basic_breadcrumb');
//  if ($show_breadcrumb == 'yes' || $show_breadcrumb == 'admin' && arg(0) == 'admin') {
//
//    // Optionally get rid of the homepage link.
//    $show_breadcrumb_home = theme_get_setting('basic_breadcrumb_home');
//    if (!$show_breadcrumb_home) {
//      array_shift($breadcrumb);
//    }
//
//    // Return the breadcrumb with separators.
//    if (!empty($breadcrumb)) {
//      $breadcrumb_separator = theme_get_setting('basic_breadcrumb_separator');
//      $trailing_separator = $title = '';
//      if (theme_get_setting('basic_breadcrumb_title')) {
//        $item = menu_get_item();
//        if (!empty($item['tab_parent'])) {
//          // If we are on a non-default tab, use the tab's title.
//          $title = check_plain($item['title']);
//        }
//        else {
//          $title = drupal_get_title();
//        }
//        if ($title) {
//          $trailing_separator = $breadcrumb_separator;
//        }
//      }
//      elseif (theme_get_setting('basic_breadcrumb_trailing')) {
//        $trailing_separator = $breadcrumb_separator;
//      }
//
//      // Provide a navigational heading to give context for breadcrumb links to
//      // screen-reader users. Make the heading invisible with .element-invisible.
//      $heading = '<h2 class="element-invisible">' . t('You are here') . '</h2>';
//
//      return $heading . '<div class="breadcrumb">' . implode($breadcrumb_separator, $breadcrumb) . $trailing_separator . $title . '</div>';
//    }
//  }
//  // Otherwise, return an empty string.
//  return '';
//}

/**
 * Generate the HTML output for a menu link and submenu.
 *
 * @param $variables
 *  An associative array containing:
 *   - element: Structured array data for a menu link.
 *
 * @return
 *  A themed HTML string.
 *
 * @ingroup themeable
 *
 */
function basic_menu_link(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  //krumo($element);
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  // Adding a class depending on the TITLE of the link (not constant)
  $element['#attributes']['class'][] = drupal_html_class('menu-' . $element['#title']);
  // Adding a class depending on the ID of the link (constant)
  $element['#attributes']['class'][] = 'mid-' . $element['#original_link']['mlid'];
  return '<li' . new Attribute($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Override or insert variables into theme_menu_local_task().
 */
function basic_preprocess_menu_local_task(&$variables) {
  $link =& $variables['element']['#link'];

  // If the link does not contain HTML already, check_plain() it now.
  // After we set 'html'=TRUE the link will not be sanitized by l().
  if (empty($link['localized_options']['html'])) {
    $link['title'] = check_plain($link['title']);
  }
  $link['localized_options']['html'] = TRUE;
  $link['title'] = '<span class="tab">' . $link['title'] . '</span>';
}

/**
 * Duplicate of theme_menu_local_tasks() but adds clearfix to tabs.
 */
//function basic_menu_local_tasks(&$variables) {
//  $output = '';
//
//  if (!empty($variables['primary'])) {
//    $variables['primary']['#prefix'] = '<h2 class="element-invisible">' . t('Primary tabs') . '</h2>';
//    $variables['primary']['#prefix'] .= '<ul class="tabs primary clearfix">';
//    $variables['primary']['#suffix'] = '</ul>';
//    $output .= drupal_render($variables['primary']);
//  }
//  if (!empty($variables['secondary'])) {
//    $variables['secondary']['#prefix'] = '<h2 class="element-invisible">' . t('Secondary tabs') . '</h2>';
//    $variables['secondary']['#prefix'] .= '<ul class="tabs secondary clearfix">';
//    $variables['secondary']['#suffix'] = '</ul>';
//    $output .= drupal_render($variables['secondary']);
//  }
//  return $output;
//}
