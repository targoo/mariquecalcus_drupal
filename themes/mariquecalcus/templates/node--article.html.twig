{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: Full node entity.
 *   - id: The node ID.
 *   - bundle: The type of the node, for example, "page" or "article".
 *   - authorid: The user ID of the node author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['node']->getCreatedTime().
 *   - promoted: Whether the node is promoted to the front page.
 *   - sticky: Whether the node is 'sticky'. Sticky nodes are ordered above
 *     other non-sticky nodes in teaser listings
 *   - published: Whether the node is published.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') %} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Formatted creation date. Preprocess functions can reformat it by
 *   calling format_date() with the desired parameters on
 *   $variables['created'].
 * - author_name: Themed username of node author output from theme_username().
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--[type]: The current node type. For example, if the node is a
 *     "Article" it would result in "node--article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   - node--preview: Whether a node is in preview mode.
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - is_front: Flag for front. Will be true when presented on the front page.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * In field variables, each field instance attached to the node a corresponding
 * variable is defined; for example, 'node.body' becomes 'body'. When needing to
 * access a field's raw values, developers/themers are strongly encouraged to
 * use these variables. Otherwise they will have to explicitly specify the
 * desired field language; for example, 'node.body.en', thus overriding any
 * language negotiation rule that may have been applied previously.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *

<ol>
  {% for key, value in _context  %}
    <li>{{ key }}</li>
  {% endfor %}
</ol>


 * @ingroup themeable
 */
#}

<article id="node-{{ node.id }}" class="{{ attributes.class}} clearfix"{{ attributes }} role="article" itemscope="" itemtype="http://schema.org/BlogPosting">

  <header>
    <div class="sharing">
      <script type="text/javascript" src="//platform.twitter.com/widgets.js"></script>
      <a href="https://twitter.com/intent/tweet?text={{ label.0 }}&url=http://www.mariquecalcus.com{{ url }}" class="twitter">
        <i class="fa fa-twitter"></i> TWEET
      </a>
      <a href="#" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u='+encodeURIComponent(location.href), 'facebook-share-dialog', 'width=626,height=436'); return false;" class="facebook">
        <i class="fa fa-facebook"></i> SHARE
      </a>
      <a href="https://plus.google.com/share?url=http://www.mariquecalcus.com{{ url }}" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;" class="gplus">
        <i class="fa fa-google-plus"></i> POST TO G+
      </a>
    </div>

    <div class="meta">
      <div class="created">
        <i class="fa fa-calendar"></i> <span>Created on</span> <time datetime="{{ node.createdtime|date("Y-m-d") }}" itemprop="datePublished">{{ node.createdtime|date("d/m/Y") }}</time>
      </div>
      <div class="updated">
        <i class="fa fa-calendar"></i> <span>Updated on</span> <time datetime="{{ node.createdtime|date("Y-m-d") }}" itemprop="dateModified">{{ node.changedtime|date("d/m/Y") }}</time>
      </div>
      <div class="author">
        <i class="fa fa-user"></i>
        <span>Written By</span>
        <span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">David Calcus</span>
        </span>
      </div>
    </div>

  </header>

  <div class="content "{{ content_attributes }}>

    {% if view_mode == 'teaser' %}
      <h2 itemprop="name headline"><a href="{{ url }}">{{ label }}</a></h2>
    {% else %}
      <span itemprop="name headline" style="display: none"><a href="{{ url }}">{{ label }}</a></span>
    {% endif %}

    <div itemprop="articleBody">
      {{ content|without('links') }}
    </div>

    {% if view_mode == 'teaser' %}
      <a href="{{ url }}">Read More</a>
    {% endif %}

  </div>

  <footer>
  </footer>

</article>

{% if view_mode == 'full' %}
  <div id="disqus_thread"></div>
  <script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'mariquecalcus'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
  </script>
  <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
{% endif %}
