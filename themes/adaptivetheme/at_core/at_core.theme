<?php

use Drupal\Core\Template\Attribute;
use Drupal\Core\Language\Language;
use Drupal\Core\Theme\ThemeSettings;
use Drupal\at_core\Theme\ThemeInfo;
use Drupal\at_core\Library\SystemLibraries;
use Drupal\at_core\Library\ThemeLibraries;
use Drupal\at_core\Layout\PageLayout;
use Drupal\at_core\Layout\LayoutAttributes;

use Drupal\image\Entity\ImageStyle;

// TODO convert to Class with methods?
global $theme;
if (at_core_theme_get_setting('settings.enable_extensions', $theme) === 1) {
  require_once(drupal_get_path('theme', 'at_core') . '/forms/ext/fonts.inc');
}

/**
 * TODO:
 * The preprocess layer is set to be removed in Drupal 9, and is proposed to
 * deprecate in Drupal 8 and introduce a new phase hook_theme_prepare().
 * This file currently uses several preprocess functions so when the new hook
 * lands in core we'll need to look at updating.
 *
 * SEE: https://drupal.org/node/2035055 (and keep an eye on it!)
 * SEE: Remove Preprocess Layer (Drupal 9 issue) https://drupal.org/node/2060783
 */

/**
 * Retrieves a setting for the current theme or for a given theme.
 * This is a cut down modified version of Drupal cores own
 * theme_get_setting().
 *
 * @param $setting_name
 *   The name of the setting to be retrieved.
 *
 * @param $theme
 *   The name of a given theme; defaults to the current theme.
 *
 * @return
 *   The value of the requested setting, NULL if the setting does not exist.
 */
function at_core_theme_get_setting($setting_name, $theme = NULL) {
  $cache = &drupal_static(__FUNCTION__, array());

  // If no key is given, use the current theme if we can determine it.
  if (!isset($theme)) {
    $theme = !empty($GLOBALS['theme_key']) ? $GLOBALS['theme_key'] : '';
  }

  if (empty($cache[$theme])) {
    // Create a theme settings object.
    $cache[$theme] = new ThemeSettings($theme);

    // Get the values for the theme-specific settings from the .info.yml files
    // of the theme and all its base themes.
    if ($theme) {
      $themes = list_themes();
      $theme_object = $themes[$theme];

      // Create a list which includes the current theme and all its base themes.
      if (isset($theme_object->base_themes)) {
        $theme_keys = array_keys($theme_object->base_themes);
        $theme_keys[] = $theme;
      }
      else {
        $theme_keys = array($theme);
      }
      foreach ($theme_keys as $theme_key) {
        if (!empty($themes[$theme_key]->info['settings'])) {
          $cache[$theme]->merge($themes[$theme_key]->info['settings']);
        }
      }
    }

    // Get the global settings from configuration.
    $cache[$theme]->merge(\Drupal::config('system.theme.global')->get());

    if ($theme) {
      // Get the saved theme-specific settings from the configuration system.
      $cache[$theme]->merge(\Drupal::config($theme . '.settings')->get());
    }
  }

  return $cache[$theme]->get($setting_name);
}

/**
* Returns HTML for a menu link and submenu.
*
* @param $variables
* An associative array containing:
* - element: Structured array data for a menu link.
*/
function at_core_menu_link(array $variables) {
  global $theme;
  $element = $variables['element'];
  $sub_menu = '';

  // Add extra classes for menu depth and mlid (menu id).
  if (!empty($element['#original_link']['depth'])) {
    $element['#attributes']['class'][] = 'menu-depth--' . $element['#original_link']['depth'];
  }
  if (!empty($element['#original_link']['mlid'])) {
    $element['#attributes']['class'][] = 'menu-item__' . $element['#original_link']['mlid'];
  }

  // Remove link attribute title (tooltips).
  if (at_core_theme_get_setting('settings.enable_extensions', $theme) === 1) {
    if (at_core_theme_get_setting('settings.enable_markup_overrides', $theme) === 1) {
      if (at_core_theme_get_setting('settings.unset_menu_titles', $theme) === 1) {
        unset($element['#localized_options']['attributes']['title']);
      }
    }
  }

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }

  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  return '<li' . new Attribute($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}


/**
 * hook_html_head_alter()
 */
function at_core_html_head_alter(&$head_elements) {
  global $theme;

  // cleartype
  $head_elements['at_core_meta_clear_type'] = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => "cleartype",
      'content' => "on",
    ),
    '#weight' => -998,
  );

  // Apple touch icons - low, medium and high (see the Apple docs on touch icons)
  if (at_core_theme_get_setting('settings.enable_touch_icons') === 1) {
    $path_to_theme = drupal_get_path('theme', $theme);
    $rel = 'apple-touch-icon';
    if (at_core_theme_get_setting('settings.apple_touch_icon_precomposed') === 1) {
      $rel = 'apple-touch-icon-precomposed';
    }
    // Apple default icon and Nokia shortcut icon.
    $icon_path_default = check_plain(at_core_theme_get_setting('settings.icon_path_default', $theme));
    if (!empty($icon_path_default)) {
      $default_icon = file_create_url($default_icon_path = $path_to_theme . '/' . $icon_path_default);
      $head_elements['at_core_touch_icon_nokia'] = array(
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#weight' => -97,
        '#attributes' => array(
          'href' => $default_icon,
          'rel' => "shortcut icon",
        ),
      );
      $head_elements['at_core_touch_icon_default'] = array(
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#weight' => -98,
        '#attributes' => array(
          'href' => $default_icon,
          'rel' => $rel,
        ),
      );
    }
    // iPad (standard display).
    $apple_touch_icon_path_ipad = check_plain(at_core_theme_get_setting('settings.apple_touch_icon_path_ipad', $theme));
    if (!empty($apple_touch_icon_path_ipad)) {
      $head_elements['at_core_touch_icon_ipad'] = array(
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#weight' => -99,
        '#attributes' => array(
          'href' => file_create_url($ipad_icon_path = $path_to_theme . '/' . $apple_touch_icon_path_ipad),
          'rel' => $rel,
          'sizes' => "76x76",
        ),
      );
    }
    // iPhone retina.
    $apple_touch_icon_path_iphone_retina = check_plain(at_core_theme_get_setting('settings.apple_touch_icon_path_iphone_retina', $theme));
    if (!empty($apple_touch_icon_path_iphone_retina)) {
      $head_elements['at_core_touch_icon_iphone_retina'] = array(
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#weight' => -100,
        '#attributes' => array(
          'href' => file_create_url($iphone_retina_icon_path = $path_to_theme . '/' . $apple_touch_icon_path_iphone_retina),
          'rel' => $rel,
          'sizes' => "120x120",
        ),
      );
    }
    // iPad retina.
    $apple_touch_icon_path_ipad_retina = check_plain(at_core_theme_get_setting('settings.apple_touch_icon_path_ipad_retina', $theme));
    if (!empty($apple_touch_icon_path_ipad_retina)) {
      $head_elements['at_core_touch_icon_ipad_retina'] = array(
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#weight' => -100,
        '#attributes' => array(
          'href' => file_create_url($ipad_retina_icon_path = $path_to_theme . '/' . $apple_touch_icon_path_ipad_retina),
          'rel' => $rel,
          'sizes' => "152x152",
        ),
      );
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * TODO: keep on on core regarding the alter hook and suggestions.
 * https://drupal.org/node/2100775
 * TODO: What about Superfish?
 */
function at_core_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add a suggestion for system menu blocks. We want all "menu" type blocks to
  // use the same menu--block.html.twig template because these use the html5
  // <nav> element as the main wrapper. It needs to be weak so it can be easily
  // overridden by more specific suggestions, so we use array_splice to move it
  // just after block__system but before the much more specific suggestions.
  if (in_array('block__system_menu_block', $suggestions)) {
    array_splice($suggestions, 1, 0, 'block__menu');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * TODO: keep on on core regarding the alter hook and suggestions - https://drupal.org/node/2100775
 */
function at_core_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  global $theme;

  // Add content type suggestions. array_splice should be safe here because
  // page__node is always a suggestion for node pages, aka there is always one
  // default suggestion.
  if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
  }

  // Show template suggestions if Devel is installed and the user enables the
  // setting to show page template suggestions.
  if (theme_get_setting('settings.show_page_suggestions', $theme) === 1) {
    if ($suggestions) {
      $these_suggestions = implode("<br>", $suggestions);
      drupal_set_message(t('Template suggestions for this page:<br>!these_suggestions <p>To stop showing these turn it off in your themes Appearance settings - see the Devel tab.</p>', array('!these_suggestions' => $these_suggestions)), 'status');
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function at_core_page_alter(&$page) {
  global $theme;

  // Get the path to the directory where our CSS files are saved
  $generated_css_file_path = drupal_get_path('theme', $theme) . '/generated_css';

  // Attach libraries.

  //$element['#attached']['library'][] = 'core/drupal.machine-name';
  //$element['#attached']['js'][] = $js_settings;

  if (at_core_theme_get_setting('settings.libraries_enable', $theme) === 1) {
    //$libraries = array();
    //$themeInfo = new ThemeInfo($theme);
    //$baseThemes = $themeInfo->getThemeInfo('base_themes');

    // Attach Drupal core libraries.
    $system_libraries = new SystemLibraries();
    $drupal_core_libraries = $system_libraries->getDrupalCoreSystemLibraries();

    foreach ($drupal_core_libraries as $key => $value) {
      $library_setting = str_replace('.', '_', strtolower($key));
      if (at_core_theme_get_setting("settings.drupal_core_$library_setting", $theme) === 1) {
        $page['#attached']['library'][] = 'core/' . $key;
      }
    }
  }

  // Attach Windowsize library
  if (at_core_theme_get_setting("settings.show_window_size", $theme) === 1) {
    $page['#attached']['library'][] = 'at_core/at.window_size';
  }

  // Attach Livereload snippet (inline)
  if (at_core_theme_get_setting("settings.livereload", $theme) === 1) {
    $livereload_snippet = '';
    if (at_core_theme_get_setting("settings.livereload_snippet", $theme)) {
      $livereload_snippet = at_core_theme_get_setting("settings.livereload_snippet", $theme);
    }
    $page['#attached']['js'][] = array(
      'data' => $livereload_snippet,
      'type' => 'inline',
    );
  }

  // Attach devel_layout and nuke_toolbar CSS files.
  if (at_core_theme_get_setting('settings.devel_layout', $theme) === 1) {
    $page['#attached']['css'][] = array(
      'data' => drupal_get_path('theme', 'at_core') . '/stylesheets/css/devel-layout.css',
      'group' => CSS_AGGREGATE_THEME,
      'weight' => CSS_COMPONENT,
    );
  }
  if (at_core_theme_get_setting('settings.nuke_toolbar', $theme) === 1) {
    $page['#attached']['css'][] = array(
      'data' => drupal_get_path('theme', 'at_core') . '/stylesheets/css/nuetralize-toolbar.css',
      'group' => CSS_AGGREGATE_THEME,
      'weight' => CSS_COMPONENT,
    );
  }

  // Attach the selected layout.
  if (at_core_theme_get_setting('settings.layouts_enable', $theme) === 1) {

    if ($default_layout = at_core_theme_get_setting('settings.template_suggestion_page', $theme)) {

      // Assume the root page templates layout as the default layout.
      $page['#selected_layout'] = $default_layout;

      // Assume the root page templates layout provider as the default provider.
      $page['#selected_provider'] = at_core_theme_get_setting('settings.template_suggestion_provider_page', $theme);

      // Assume the root page templates layout plugin as the default plugin.
      $page['#selected_plugin'] = at_core_theme_get_setting('settings.template_suggestion_plugin_page', $theme);


      // Get theme registry, we need to determine the template suggestion for the current page.
      $theme_registry = theme_get_registry(FALSE);
      $info = array();

      // Get page template suggestions. Set these as a page variables so
      // sub-themes can leverage them also in hook_page_alter().
      // Deprecate this feature because it causes a render array warning, dang nabbit.
      /*
      if ($page_suggestions = theme_get_suggestions(arg(), 'page')) {
        $page['theme_hook_suggestions'] = $page_suggestions;
      }

      $suggestions = array();
      if (!empty($page['theme_hook_suggestions'])) {
        $suggestions = $page['theme_hook_suggestions'];
      }
      if (!empty($page['theme_hook_suggestion'])) {
        $suggestions[] = $page['theme_hook_suggestion'];
      }
      */

      if ($suggestions = theme_get_suggestions(arg(), 'page')) {
        foreach (array_reverse($suggestions) as $suggestion) {
          // We need three settings to set the layout - the provider (the active theme or a base theme),
          // the plugin (a layout plugin name) and the actual CSS layout set for this suggestion.
          // Note in theme settings the root hook "page" is treated as a suggestion.
          if ($suggestion_provider = at_core_theme_get_setting("settings.template_suggestion_provider_$suggestion", $theme)) {
            $page['#selected_provider'] = $suggestion_provider;
          }
          if ($suggestion_plugin = at_core_theme_get_setting("settings.template_suggestion_plugin_$suggestion", $theme)) {
            $page['#selected_plugin'] = $suggestion_plugin;
          }
          if ($suggestion_layout = at_core_theme_get_setting("settings.template_suggestion_$suggestion", $theme)) {
            $page['#selected_layout'] = $suggestion_layout;
          }
          if ($theme_registry->has($suggestion)) {
            $info = $theme_registry->get($suggestion);
            break;
          }
        }
      }

      // Instantiate new PageLayout object, we paths to CSS files.
      $layout_data = new PageLayout($page['#selected_provider'], $page['#selected_plugin'], $page['#selected_layout']);
      $layouts = $layout_data->buildLayoutDataArrays();

      // Set path to the selected layout CSS.
      $file_path = drupal_get_path('theme', $page['#selected_provider']) . '/layouts/' . $page['#selected_plugin'] . '/' . $layouts['css_layout_path'] . '/' . $page['#selected_layout'];

      // Main CSS layout file
      $data = $file_path . '/' . $layouts['css_layout']['styles'];
      $page['#attached']['css'][$data] = array(
        'type' => 'file',
        'data' => $data,
        'every_page' => FALSE,
        'group' => CSS_AGGREGATE_THEME,
        'weight' => CSS_LAYOUT,
      );

      // No media queries CSS for IE8 (if enabled).
      if (at_core_theme_get_setting('settings.layouts_no_mq_' . $page['#selected_layout'], $theme) === 1) {
        // IE Layout file
        $ie_data = $file_path . '/' . $layouts['css_layout']['no_mq'];
        $page['#attached']['css'][$ie_data] = array(
          'type' => 'file',
          'data' => $ie_data,
          'browsers' => array(
            'IE' => 'IE 8',
            '!IE' => FALSE,
          ),
          'group' => CSS_AGGREGATE_THEME,
          'weight' => CSS_LAYOUT,
        );
        // Attach IE9.js if IE8 support is set. This is rather brutal because
        // the user can't disable this. We polyfill because all the shipped
        // layouts use :last-child and other pseudo selectors not supported by
        // IE8. Still, the user could use something else, what exactly I don't
        // know because jQuery Selectivzr depending is not reliable.
        $page['#attached']['library'][] = 'at_core/at.ie9js';
      }
    }

    // Max width override - need this to ideally load after the main layout CSS files.
    if (at_core_theme_get_setting('settings.max_width_enable')) {
      $max_width_file = $generated_css_file_path . '/' . $theme . '--max-width.css';
      if (file_exists($max_width_file)) {
        $page['#attached']['css'][$max_width_file] = array(
          'type' => 'file',
          'data' => $max_width_file,
          'group' => CSS_AGGREGATE_THEME,
          'weight' => CSS_LAYOUT,
        );
      }
    }
  }

  // Load generated CSS files from Advanced settings - fonts, titles, image styles, custom css etc.
  if (at_core_theme_get_setting('settings.enable_extensions', $theme) === 1) {

    // Fonts CSS.
    if (at_core_theme_get_setting('settings.enable_fonts', $theme) === 1) {
      $fonts_file = $generated_css_file_path . '/' . $theme . '--fonts.css';
      if (file_exists($fonts_file)) {
        $page['#attached']['css'][$fonts_file] = array(
          'type' => 'file',
          'data' => $fonts_file,
          'group' => CSS_AGGREGATE_THEME,
          'weight' => CSS_THEME,
        );
      }
    }

    // Titles CSS.
    if (at_core_theme_get_setting('settings.enable_titles', $theme) === 1) {
      $titles_file = $generated_css_file_path . '/' . $theme . '--titles.css';
      if (file_exists($titles_file)) {
        $page['#attached']['css'][$titles_file] = array(
          'type' => 'file',
          'data' => $titles_file,
          'group' => CSS_AGGREGATE_THEME,
          'weight' => CSS_THEME,
        );
      }
    }

    // Images CSS.
    if (at_core_theme_get_setting('settings.enable_images', $theme) === 1) {
      $images_file = $generated_css_file_path . '/' . $theme . '--images.css';
      if (file_exists($images_file)) {
        $page['#attached']['css'][$images_file] = array(
          'type' => 'file',
          'data' => $images_file,
          'group' => CSS_AGGREGATE_THEME,
          'weight' => CSS_THEME,
        );
      }
    }

    // Custom CSS.
    if (at_core_theme_get_setting('settings.enable_custom_css', $theme) === 1) {
      $custom_css_file = $generated_css_file_path . '/' . $theme . '--custom-css.css';
      $page['#attached']['css'][$custom_css_file] = array(
        'type' => 'file',
        'data' => $custom_css_file,
        'group' => CSS_AGGREGATE_THEME,
        'weight' => CSS_THEME,
      );
    }

    // Markup overrides.
    if (at_core_theme_get_setting('settings.enable_markup_overrides', $theme) === 1) {

      // Breadcrumbs.
      if (at_core_theme_get_setting('settings.breadcrumb_label', $theme) === 1 || at_core_theme_get_setting('settings.breadcrumb_separator', $theme) === 1) {
        $breadcrumb_file = $generated_css_file_path . '/' . $theme . '--breadcrumb.css';
        $page['#attached']['css'][$breadcrumb_file] = array(
          'type' => 'file',
          'data' => $breadcrumb_file,
          'group' => CSS_AGGREGATE_THEME,
          'weight' => CSS_THEME,
        );
      }

      // Login block.
      if ($GLOBALS['user']->isAuthenticated() == FALSE) {
        if (at_core_theme_get_setting('settings.horizontal_login_block', $theme) === 1) {
          $login_block_file = $generated_css_file_path . '/' . $theme . '--login-block.css';
          $page['#attached']['css'][$login_block_file] = array(
            'type' => 'file',
            'data' => $login_block_file,
            'group' => CSS_AGGREGATE_THEME,
            'weight' => CSS_THEME,
          );
        }
      }
    }

    // A external link to Google web fonts.
    // TODO add extra checks so this is not run often, consider adding "allowable font types" in theme settings?
    $google_font = at_core_load_google_fonts($theme);
    if (!empty($google_font)) {
      $page['#attached']['css'][$google_font] = array(
        'type' => 'external',
        'data' => $google_font,
        'weight' => CSS_THEME,
      );
    }
  }

  //kpr($page);
}

/**
 * hook_form_FORM_ID_alter()
 * Modify the User Login Block Form
 */
function at_core_form_user_login_form_alter(&$form, &$form_state, $form_id) {
  global $theme;

  // Login block mods.
  if (at_core_theme_get_setting('settings.enable_extensions', $theme) === 1) {
    if (at_core_theme_get_setting('settings.enable_markup_overrides', $theme) === 1) {

      // Placeholders.
      if (at_core_theme_get_setting('settings.login_block_placeholder_labels', $theme) === 1) {
        $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
        $form['pass']['#attributes']['placeholder'] = $form['pass']['#title'];
        $form['name']['#title_display'] = 'invisible';
        $form['pass']['#title_display'] = 'invisible';
      }
    }
  }
}

/**
 * Preprocess variables for html templates.
 *
 * SEE: https://drupal.org/node/2035055 hook_theme_prepare()
 */
function at_core_preprocess_html(&$variables) {
  global $theme;

  // Re-usable variables for the h5bp type conditional classes. Attributes can
  // only be used once (one time) in a template, so we need to set re-usable
  // variables for the html conditional classes in html.html.twig.
  $language_interface = \Drupal::service('language_manager')->getCurrentLanguage();
  $variables['lang'] = $language_interface->id ? $language_interface->id : 'en';
  $variables['dir'] = $language_interface->dir ? $language_interface->dir : 'ltr';

  // Add a "site name" body classes for advanced theming of multi-sites.
  if ($variables['head_title_array']['name']) {
    $variables['attributes']['class'][] = 'site-name--' . drupal_html_class($variables['head_title_array']['name']);
  }

  // Set the skip navigation target ID
  $variables['skip_link_target'] = '#main-content';
  if ($skip_link_target = at_core_theme_get_setting('settings.skip_link_target', $theme)) {
    $variables['skip_link_target'] = check_plain($skip_link_target);
  }
}

/**
 * Preprocess variables for page templates.
 *
 * SEE: https://drupal.org/node/2035055 hook_theme_prepare()
 */
function at_core_preprocess_page(&$variables) {
  global $theme;

  $page = $variables['page'];

  // Test should we move CSS loading from hook_page_alter() to preprocess or perhpas hook_theme_prepare() etc.
  /*
  $file = drupal_get_path('theme', 'at_core') . '/stylesheets/css/show-regions.css';
  $css = array(
    '#attached' => array(
      'css' => array(
        $file => array (
          'type' => 'file',
          'data' => $file,
          'group' => CSS_AGGREGATE_THEME,
          'weight' => -999,
        ),
      ),
    ),
  );
  drupal_render($css);
  */

  // Layouts.
  if (at_core_theme_get_setting('settings.layouts_enable', $theme)) {

    // Set a variable that holds an array of the active visible regions.
    $regions = system_region_list($theme, REGIONS_VISIBLE);

    $variables['#active_regions'] = array();

    foreach ($regions as $region_name => $region_label) {
      if (!empty($page[$region_name])) {
        $variables['#active_regions'][] = $region_name;
      }
    }

    // Set advanced classes on rows for theming layouts.
    if (!empty($variables['#active_regions'])) {
      if ($selected_layout = $page['#selected_layout']) {

        // Add a layout id to the page wrapper.
        $variables['attributes']['id'][] = 'page-layout--' . drupal_html_class($page['#selected_plugin']);
        $variables['attributes']['class'][] = 'page-layout-variant--' . drupal_html_class($selected_layout);

        $layout_attr = new LayoutAttributes($page['#selected_provider'], $page['#selected_plugin'], $selected_layout, $variables['#active_regions']);
        $row_attributes = $layout_attr->rowAttributes();

        // Check if we have attributes to avoid a fatal error.
        if (empty($row_attributes)) {
          drupal_set_message(t('No layout set, you need to set a layout for the default page or template suggestion in use - visit the Appearance settings page for your theme and set a layout.'), 'error');
        }
        else {
          $variables += $row_attributes;
        }
      }
    }
  }

  //kpr($variables);kpr($variables);
}

/**
 * Preprocess variables for region templates.
 *
 * SEE: https://drupal.org/node/2035055 hook_theme_prepare()
 */
function at_core_preprocess_region(&$variables) {
  // Set a class for block titles.
  $variables['attributes']['class'] = str_replace('region-', 'region__', $variables['attributes']['class']);

  $variables['html_element'] = 'div';
  if ($variables['region'] == 'content') {
    $variables['html_element'] = 'main';
    $variables['attributes']['role'][] = 'main';
  }
}

/**
 * Preprocess variables for node templates.
 *
 * SEE: https://drupal.org/node/2035055 hook_theme_prepare()
 */
function at_core_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Initialize new attribute arrays.
  $variables['footer_attributes'] = new Attribute(array('class' => array()));
  $variables['submitted_attributes'] = new Attribute(array('class' => array()));

  // Modify attributes to BEM
  $variables['attributes']['class'] = str_replace('node-', 'node--', $variables['attributes']['class']);
  if ($node->isPromoted()) {
    $variables['attributes']['class'] = str_replace('promoted', 'node--promoted', $variables['attributes']['class']);
  }
  if ($node->isSticky()) {
    $variables['attributes']['class'] = str_replace('sticky', 'node--sticky', $variables['attributes']['class']);
  }
  if (!$node->isPublished()) {
    $variables['attributes']['class'] = str_replace('unpublished', 'node--unpublished', $variables['attributes']['class']);

    // Unpublished status message.
    $variables['title_prefix']['status'] = array(
      '#markup' => t('Node unpublished'),
      '#prefix' => '<p class="unpublished clearfix" aria-label="Status message" role="contentinfo">',
      '#suffix' => '</p>',
    );
  }
  if (isset($variables['preview'])) {
    $variables['attributes']['class'] = str_replace('preview', 'node--preview', $variables['attributes']['class']);
  }
  $variables['attributes']['class'] = str_replace('view-mode-', 'view-mode--', $variables['attributes']['class']);

  // Set ID
  $variables['attributes']['id'] = 'node__' . $node->id();

  // Set classes for node title, submitted and footer.
  $variables['title_attributes']['class'][] = 'node__title';
  $variables['submitted_attributes']['class'][] = 'node__submitted';
  $variables['footer_attributes']['class'][] = 'node__footer';

  // Set a class on the node footer if there is a user picture.
  if (isset($variables['user_picture']['user_picture'])) {
    $variables['submitted_attributes']['class'][] = 'node__submitted--user-picture';
  }

  // Reset submitted variable.
  if (!empty($variables['submitted'])) {
    $variables['submitted'] = t('Submitted by <address class="node__author" rel="author">!username</address> on <time class="node__datetime">!datetime</time>', array(
      '!username' => $variables['name'],
      '!datetime' => $variables['date'],
    ));
  }

  //dsm($variables);
}

/**
 * Preprocess variables for comment templates.
 *
 * SEE: https://drupal.org/node/2035055 hook_theme_prepare()
 */
function at_core_preprocess_comment_wrapper(&$variables) {
  $variables['attributes']['class'] = str_replace('comment-wrapper', 'comments__wrapper', $variables['attributes']['class']);
}

/**
 * Preprocess variables for comment templates.
 *
 * SEE: https://drupal.org/node/2035055 hook_theme_prepare()
 */
function at_core_preprocess_comment(&$variables) {
  global $theme;

  $comment = $variables['elements']['#comment'];

  // Initialize new attribute arrays.
  $variables['submitted_attributes'] = new Attribute(array('class' => array()));
  $variables['footer_attributes'] = new Attribute(array('class' => array()));

  // Set classes for comment title, submitted and footer.
  $variables['title_attributes']['class'][] = 'comment__title';
  $variables['submitted_attributes']['class'][] = 'comment__submitted';
  $variables['footer_attributes']['class'][] = 'comment__footer';

  // Set a class on the comment footer if there is a user picture.
  if (isset($variables['user_picture']['user_picture'])) {
    $variables['submitted_attributes']['class'][] = 'comment__submitted--user-picture';
  }

  // Hide comment titles.
  if (at_core_theme_get_setting('settings.enable_extensions', $theme) === 1) {
    if (at_core_theme_get_setting('settings.enable_markup_overrides', $theme) === 1) {
      if (at_core_theme_get_setting('settings.comments_hide_title', $theme) === 1) {
        $variables['title_attributes']['class'][] = 'visually-hidden';
      }
    }
  }

  // Unpublished status message.
  if ($variables['status'] == 'unpublished') {
    $variables['title_prefix']['status'] = array(
      '#markup' => t('Comment unpublished'),
      '#prefix' => '<p class="unpublished clearfix" aria-label="Status message" role="contentinfo">',
      '#suffix' => '</p>',
    );
  }

  // Reset the title to be the permalink.
  $permalink_uri = $comment->permalink();
  $permalink_uri['options']['attributes']['class'][] = 'comment__permalink';
  $permalink_uri['options']['attributes']['rel'][] = 'bookmark';
  $variables['title'] = l($comment->subject->value, $permalink_uri['path'], $permalink_uri['options']);

  // Reset submitted variable.
  if (!empty($variables['submitted'])) {
    $variables['submitted'] = t('Submitted by <address class="comment__author" rel="author">!username</address> on <time class="comment__datetime">!datetime</time>', array(
      '!username' => $variables['author'],
      '!datetime' => $variables['created'],
    ));
  }

  // Remove clearfix, we add this in the template so themes can easily remove it.
  $variables['attributes']['class'] = array_values(array_diff($variables['attributes']['class'], array('clearfix')));

  // Assume all other classes are modifiers and are not prefixed.
  foreach ($variables['attributes']['class'] as $class) {
    if ($class !== 'comment') {
      $variables['attributes']['class'] = str_replace($class, 'comment--' . $class, $variables['attributes']['class']);
    }
  }
}

/**
 * Preprocess variables for block templates.
 *
 * SEE: https://drupal.org/node/2035055 hook_theme_prepare()
 */
function at_core_preprocess_block(&$variables) {
 global $theme;

  // Conditional markup, need to see if this affects caching and if so, think about that a lot.
  $variables['html_element'] = 'div';
  if (!empty($variables['label'])) {
    $variables['html_element'] = 'section';
    $variables['title_attributes']['class'][] = 'block__title';
  }

  // Remove login block links.
  if (at_core_theme_get_setting('settings.enable_extensions', $theme) === 1) {
    if (at_core_theme_get_setting('settings.enable_markup_overrides', $theme) === 1) {
      if (at_core_theme_get_setting('settings.login_block_remove_links', $theme) === 1 || at_core_theme_get_setting('settings.horizontal_login_block', $theme) === 1) {
        if ($variables['plugin_id'] == 'user_login_block') {
          unset($variables['content']['user_links']);

          // Add class for horizontal login.
          if (at_core_theme_get_setting('settings.horizontal_login_block', $theme) === 1) {
            $variables['attributes']['class'][] = 'block-login--horizontal';
          }
        }
      }
    }
  }
}

/**
 * Preprocess variables for field templates.
 *
 * SEE: https://drupal.org/node/2035055 hook_theme_prepare()
 * SEE: https://drupal.org/node/1987398 field.module - Convert theme_ functions to Twig
 */
function at_core_preprocess_field(&$variables) {
  global $theme;

  $variables['attributes']['class'] = str_replace('field-name-', 'field-name--', $variables['attributes']['class']);
  $variables['attributes']['class'] = str_replace('field-type-', 'field-type--', $variables['attributes']['class']);
  $variables['attributes']['class'] = str_replace('field-label-', 'field-label--', $variables['attributes']['class']);

  // Set variables for image fields.
  if (at_core_theme_get_setting('settings.enable_extensions', $theme) === 1) {
    if (at_core_theme_get_setting('settings.enable_images', $theme) === 1) {
      if ($variables['element']['#field_type'] == 'image') {

        $entity_type = $variables['element']['#entity_type'];
        $node_type = $variables['element']['#bundle'];
        $view_mode = $variables['element']['#view_mode'];

        $caption_setting = at_core_theme_get_setting('settings.image_captions_' . $node_type . '_' . $entity_type . '_' . $view_mode, $theme);
        $image_count_setting = at_core_theme_get_setting('settings.image_count_' . $node_type . '_' . $entity_type . '_' . $view_mode, $theme);

        // Reset items array to first item only.
        if ($image_count_setting == 1) {
          $item = reset($variables['items']);
          $variables['items'] = array($item);
        }

        // Captions.
        if ($caption_setting == 1) {
          foreach ($variables['items'] as $key => $item) {
            if (!empty($item['#image_style'])) {
              $style = entity_load('image_style', $item['#image_style']);
              $dimensions = array(
                'width' => $item['#item']['width'],
                'height' => $item['#item']['height'],
              );
              $style->transformDimensions($dimensions);
              $variables['items'][$key]['#item']['image_style_width'] = $dimensions['width'];
              $variables['items'][$key]['#item']['image_style_height'] = $dimensions['height'];
            }
            $variables['items'][$key]['#captions'] = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Preprocess variables for breadcrumb templates.
 *
 * SEE: https://drupal.org/node/2035055 hook_theme_prepare()
 * SEE: https://drupal.org/node/1987398 field.module - Convert theme_ functions to Twig
 */
function at_core_preprocess_breadcrumb(&$variables) {
  global $theme;

  // New attributes array for breadcrumb title.
  $variables['title_attributes'] = new Attribute(array('class' => array()));

  // Set attributes.
  $variables['attributes']['class'][] = 'breadcrumb';
  $variables['attributes']['role'][] = 'navigation';

  // Theme settings.
  if (at_core_theme_get_setting('settings.enable_extensions', $theme) === 1) {
    if (at_core_theme_get_setting('settings.enable_markup_overrides', $theme) === 1) {

      // Show or hide the label.
      if (at_core_theme_get_setting('settings.breadcrumb_label', $theme) === 1) {
        $variables['title_attributes']['class'] = 'breadcrumb__title';
      }
      else {
        $variables['title_attributes']['class'] = 'visually-hidden';
      }

      // Show or hide the Home link.
      if (at_core_theme_get_setting('settings.breadcrumb_home', $theme) === 0) {
        if (in_array('<a href="/">Home</a>', $variables['breadcrumb'])) {
          array_shift($variables['breadcrumb']);
        }
      }

      // Page title
      if (at_core_theme_get_setting('settings.breadcrumb_title', $theme) === 1) {
        $variables['breadcrumb'][] = strip_tags(drupal_get_title());
      }
    }
  }
}

// Check views preprocess functions we need.
/*
function at_core_preprocess_views_view(&$variables) {
  //kpr($variables);
}
*/


/**
 * Preprocess variables for user templates.
 */
/*
function at_core_preprocess_user(&$variables) {
  //$variables['view_mode'] = $variables['elements']['#view_mode'];
}
*/
